// Package multi provides a trumpet.Generator that multiplexes training
// data over multiple trumpet.Generators.
package multi

import (
	"github.com/rkoesters/trumpet"
)

// Generator multiplexes given data over several trumpet.Generators and
// generates data from the specified trumpet.Generator.
type Generator struct {
	trainers  []trumpet.Generator
	generator trumpet.Generator
}

// New returns a *Generator.
func New() *Generator {
	return &Generator{}
}

// AddTrainer adds a new trumpet.Generator to the list of trainers that
// will be given data passed to Train.
func (g *Generator) AddTrainer(trainer trumpet.Generator) {
	g.trainers = append(g.trainers, trainer)
}

// SetGenerator sets the trumpet.Generator that will generate the string
// returned by Generate. The generator should also be passed to
// AddTrainer to make sure its gets the training data as well.
func (g *Generator) SetGenerator(generator trumpet.Generator) {
	g.generator = generator
}

// Train calls the Train method on all trumpet.Generators given by the
// AddTrainer method calls.
func (g *Generator) Train(s string) {
	for _, trainer := range g.trainers {
		trainer.Train(s)
	}
}

// Generate returns the string generated by the trumpet.Generator set by
// SetGenerator.
func (g *Generator) Generate(maxLength int) string {
	return g.generator.Generate(maxLength)
}
